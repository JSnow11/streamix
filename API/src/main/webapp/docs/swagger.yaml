swagger: '2.0'
info:
  description: This is a simple API
  version: 1.0.0
  title: Simple Music API
  # put the contact info for your development or API team
  contact:
    email: you@your-company.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

schemes: 
- http
host: localhost:8090
basePath: /api

# tags are used for organizing operations
tags:
- name: songs
  description: Songs
- name: lists
  description: Playlists

paths:
  /songs:
    get:
      tags:
      - songs
      summary: Get songs
      operationId: getSongs
      description: Get all songs
      produces:
      - application/json
      parameters:
      - in: query
        name: order
        description: Order results by album or artist
        required: false
        type: string
        enum:
        - album
        - -album
        - artist
        - -artist
      - in: query
        name: q
        description: Query to filter
        type: string
        required: false
      responses:
        200:
          description: Search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/Song'
        400:
          description: Bad request
    post:
      tags:
      - songs
      summary: Create a song
      operationId: createSong
      description: Create a song
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: song
        description: Song to create
        required: true
        schema:
          $ref: '#/definitions/Song'
      responses:
        201:
          description: Song created
          schema:
            $ref: '#/definitions/Song'
        400:
          description: Bad request
    put:
      tags:
      - songs
      summary: Update a song
      operationId: updateSong
      description: Update a song
      consumes:
      - application/json
      parameters:
      - in: body
        name: song
        description: Song to update
        required: true
        schema:
          $ref: '#/definitions/Song'
      responses:
        204:
          description: Song updated
        400:
          description: Bad request
        404:
          description: Song not found
  /songs/{id}:
    get:
      tags:
      - songs
      summary: Get one song
      operationId: getSong
      description: Get one song
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Id of the song
        required: true
        type: string
      responses:
        200:
          description: Song matching id
          schema:
            $ref: '#/definitions/Song'
        404:
          description: Song not found
    delete:
      tags:
      - songs
      summary: Delete song
      operationId: deleteSong
      description: Delete song
      parameters:
      - in: path
        name: id
        description: Id of the song
        required: true
        type: string
      responses:
        204:
          description: Song deleted
        404:
          description: Song not found
  /lists:
    get:
      tags:
      - lists
      summary: Get lists
      operationId: getLists
      description: Get all lists
      produces:
      - application/json
      parameters:
      - in: query
        name: order
        description: Order results by name
        required: false
        type: string
        enum:
        - name
        - -name
      - in: query
        name: isEmpty
        description: Filter lists with no songs
        type: boolean
        required: false
      - in: query
        name: name
        description: Filter lists by name
        type: string
        required: false
      responses:
        200:
          description: Search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/Playlist'
        400:
          description: Bad request
    post:
      tags:
      - lists
      summary: Create a list
      operationId: createList
      description: Create a List
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: playlist
        description: List to add
        schema:
          $ref: '#/definitions/Playlist'
      responses:
        201:
          description: List created
          schema:
            $ref: '#/definitions/Playlist'
        400:
          description: Bad request
    put:
      tags:
      - lists
      summary: Update a list
      operationId: updateList
      description: Update a List
      consumes:
      - application/json
      parameters:
      - in: body
        name: playlist
        description: List to update
        schema:
          $ref: '#/definitions/Playlist'
      responses:
        204:
          description: List updated
        400:
          description: Bad request
        404:
          description: List not found
  /lists/{id}:
    get:
      tags:
      - lists
      summary: Get one list
      operationId: getList
      description: Get one list
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Id of the list
        required: true
        type: string
      responses:
        200:
          description: List matching id
          schema:
            $ref: '#/definitions/Playlist'
        404:
          description: List not found
    delete:
      tags:
      - lists
      summary: Delete list
      operationId: deleteList
      description: Delete list
      parameters:
      - in: path
        name: id
        description: Id of the list
        required: true
        type: string
      responses:
        204:
          description: List deleted
        404:
          description: List not found
  /lists/{playlistId}/{songId}:
    post:
      tags:
      - lists
      summary: Add song to list
      operationId: addSongToList
      description: Add song to list
      produces:
      - application/json
      parameters:
      - in: path
        name: playlistId
        description: Id of the list
        required: true
        type: string
      - in: path
        name: songId
        description: Id of the song
        required: true
        type: string
      responses:
        201:
          description: Song added to list
          schema:
            $ref: '#/definitions/Playlist'
        400:
          description: Bad request
        404:
          description: List or song not found
    delete:
      tags:
      - lists
      summary: Delete song from list
      operationId: deleteSongFromList
      description: Delete song from list
      parameters:
      - in: path
        name: playlistId
        description: Id of the list
        required: true
        type: string
      - in: path
        name: songId
        description: Id of the song
        required: true
        type: string
      responses:
        204:
          description: Song deleted from list
        404:
          description: List or song not found
definitions:
  Song:
    type: object
    required:
    - title
    properties:
      id:
        type: string
      title:
        type: string
      artist:
        type: string
      album:
        type: string
      year:
        type: string
    example: 
      id: s1
      title: Rolling in the Deep
      artist: Adele
      album: "21"
      year: "2011"
  Playlist:
    required:
    - name
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      songs:
        type: array
        items:
          $ref: '#/definitions/Song'
    example:
      id: p5
      name: Favourites
      description: My favourite songs
      songs:
        - id: s1
          title: Rolling in the Deep
          artist: Adele
          album: "21"
          year: "2011"